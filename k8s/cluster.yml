apiVersion: v1
kind: Service
metadata:
  name: push
spec:
  ports:
    - name: "8080"
      port: 8080
      targetPort: 8080
    - name: "8000"
      port: 8000
      targetPort: 8000
  selector:
    name: push
  type: NodePort
status:
  loadBalancer: {}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  labels:
    name: push
  name: push
  annotations:
    kubernetes.io/ingress.class: "nginx-generic-public"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "900"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "900"
    nginx.ingress.kubernetes.io/proxy-next-upstream: "error timeout http_502 http_503"
    nginx.ingress.kubernetes.io/proxy-next-upstream-tries: "2"
    nginx.ingress.kubernetes.io/proxy-next-upstream-timeout: "1"
spec:
  rules:
    - http:
        paths:
          - backend:
              service:
                name: push
                port:
                  number: 8080
            path: /
            pathType: Prefix
status:
  loadBalancer: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: push
  name: push
spec:
  selector:
    matchLabels:
      name: push
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 0
  template:
    metadata:
      labels:
        name: push
    spec:
      containers:
        - env:
            - name: MANAGEMENT_SERVER_PORT
              value: "8000"
            - name: OPENTRACING_JAEGER_UDP_SENDER_HOST
              value: jaeger
            - name: OPENTRACING_JAEGER_UDP_SENDER_PORT
              value: "6831"
            - name: PUSH_CLIENT_CLOSE_GRACE_PERIOD_DURATION
              value: 4s
            - name: PUSH_HEARTBEAT_INTERVAL_DURATION
              value: 30s
            - name: PUSH_RECONNECT_DITHER_MAX_DURATION
              value: 180s
            - name: PUSH_RECONNECT_DITHER_MIN_DURATION
              value: 120s
            - name: SERVER_PORT
              value: "8080"
            - name: SPRING_PROFILES_ACTIVE
              value: kubernetes
            - name: SPRING_REDIS_DATABASE
              value: "0"
            - name: SPRING_REDIS_HOST
              value: redis
            - name: SPRING_REDIS_PORT
              value: "6379"
          image: thegoncalomartins/push
          imagePullPolicy: Never
          name: push
          ports:
            - containerPort: 8080
            - containerPort: 8000
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 8000
            periodSeconds: 10
            initialDelaySeconds: 360
            timeoutSeconds: 60
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: 8000
            periodSeconds: 10
            initialDelaySeconds: 360
            timeoutSeconds: 60
          resources: {}
      hostname: push
      restartPolicy: Always
status: {}
---
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: push
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: push
  minReplicas: 2
  maxReplicas: 6
  targetCPUUtilizationPercentage: 50
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis
data:
  update-node.sh: |
    #!/bin/sh
    REDIS_NODES="/data/nodes.conf"
    sed -i -e "/myself/ s/[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}/${POD_IP}/" ${REDIS_NODES}
    exec "$@"
  redis.conf: |+
    cluster-enabled yes
    cluster-require-full-coverage no
    cluster-node-timeout 15000
    cluster-config-file /data/nodes.conf
    cluster-migration-barrier 1
    appendonly yes
    protected-mode no
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
spec:
  serviceName: redis
  replicas: 6
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: redis
          ports:
            - containerPort: 6379
              name: client
            - containerPort: 16379
              name: gossip
          command: ["/conf/update-node.sh", "redis-server", "/conf/redis.conf"]
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          volumeMounts:
            - name: conf
              mountPath: /conf
              readOnly: false
            - name: data
              mountPath: /data
              readOnly: false
      volumes:
        - name: conf
          configMap:
            name: redis
            defaultMode: 0755
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: redis
spec:
  type: ClusterIP
  ports:
    - port: 6379
      targetPort: 6379
      name: client
    - port: 16379
      targetPort: 16379
      name: gossip
  selector:
    app: redis
